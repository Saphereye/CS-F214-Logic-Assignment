#include <iostream>
#include <cassert>
#include "logic.h"

using namespace std;

void testLogic() {
    assert(Logic::infixToPrefix("(a*b)>(a+c)") == ">*ab+ac");
    assert(Logic::infixToPrefix("a*b>a+c") == ">*ab+ac");
    assert(Logic::infixToPrefix("(a*b>a)+c") == "+>*abac");
	debug("Output 1", Logic::infixToPrefix("((~(~(o*i)))*(((w>f)+(l>b))+((~c)+(c>b))))"));
	
	debug("Output 2", Logic::infixToPrefix("((~(~(~(((~((~(~(~(((~n)>(~j))>((p>a)>(~v))))))>((~((((k+g)*(f*v))>((d>g)+(b+u)))+((~(q*m))*((q+m)>(u>i)))))>(((((l>r)>(c>m))*((r*d)>(k>n)))>((~(m*i))>((k+b)+(~w))))*((((n*h)+(~y))+((z*z)*(a>i)))>(((~d)>(e>z))>((n+v)>(e+v))))))))>((~(~(~(((~(x+l))+((~a)*(a>l)))+(((~d)>(q*y))+((c>o)*(i*k)))))))>(((((((~c)*(i*s))>((v>l)+(f>m)))*(((~k)>(k*g))+((~l)>(q>t))))*((((~r)*(d*g))*((~g)>(~e)))>(~((h>s)*(o+u)))))*(((~((l*y)>(~p)))*(((v>h)>(h>y))*(~(o*f))))*(~(((r+n)>(~s))*((e+p)*(n*f))))))*(~(((~((~t)*(i+a)))*(~(~(m*y))))+((((o+i)*(r+u))>((p+v)+(m+v)))+((~(p+c))*(~(h>w)))))))))+(~((~(((~(~(~(~z))))>(~((~(~l))*(~(p*t)))))>(((~((r+n)*(a>o)))+(((g>c)+(y*k))*((e>k)+(f>x))))+((~((o*b)+(e*h)))+(((a*s)*(~s))*((w*y)>(x+e)))))))+(((((~((d*c)+(m+f)))*(((z>s)+(s>x))>((f+k)*(~t))))+((((s>u)>(~x))+((e>j)>(f*u)))+((~(z>f))>((l+d)>(q>u)))))+(~(((~(b>x))+(~(~j)))*((~(t+j))*(~(p>c))))))+((~((~(~(g+l)))*(((d>b)*(~r))>((j+z)*(g+j)))))>(~(~((~(c+g))>((e*n)>(g*e)))))))))))))*(~((~((((~((((((l+c)*(l*n))*((m>w)>(r+j)))*(~((~f)*(h*k))))*((((~w)+(~j))+((~d)>(h>s)))+(~((~b)*(~a)))))>(((~((w>b)+(~b)))>(((i+i)>(~g))*((u*y)+(b>b))))>(((~(~n))*((d>j)*(a>t)))>(~(~(~p)))))))>(((((~(~(~r)))*(~((u*t)+(y>g))))>((((v>n)>(q*k))*((u>l)*(c>m)))>((~(o*v))>(~(c*c)))))*((~(((o>d)>(g+o))*((x>z)*(d*g))))>(((~(~h))>((p>e)+(g+y)))>(((t*g)*(n>b))*((n>z)>(p>h))))))*(((((~(e>i))>((v>s)*(f>l)))+((~(l*e))*((a+a)+(t*v))))*((((c*u)+(x>e))*((s*n)+(n*k)))+(((s+u)+(d+y))+((~i)*(s+r)))))>(((((m+h)>(i*t))>((~u)+(f*z)))+((~(q>g))+((i*d)*(e*e))))*((((i+u)>(x*g))>(~(b>d)))>(((~z)*(w>v))*((l>v)*(r*t))))))))>(((((~(~((f*g)*(j*h))))*(((~(r>y))+((g>g)*(~q)))*(((f*j)>(s>e))*((n+d)*(v+f)))))*(~(((~(u+k))*((q*q)>(d>f)))>(((x*c)>(k*o))>((~a)*(d+l))))))+((((~((d>i)+(~e)))>(((~p)+(g*r))*(~(v+x))))>(~((~(y+u))*((u+a)*(~u)))))>((~(~((~f)+(~e))))>((((~e)+(~h))>((i>s)>(m*o)))*(~((~r)*(c>b)))))))*(~((((((p>k)>(r>f))>(~(h*l)))*(~(~(m>n))))+(~(~((g+i)+(u>a)))))*(((((e+i)>(y*v))+(~(~b)))*(((n+w)*(a>x))*((w>l)*(~p))))>(~(((o>n)+(j>i))>((c*x)+(f*y)))))))))*(((((((((~n)>(z>j))>((b*b)+(~u)))+(((~r)*(b+g))>((i>p)>(~n))))+(~(((t*g)+(c*v))>(~(v>d)))))*(((((m*v)+(w+r))*((n+k)*(~g)))>(((c*r)*(g*l))+((a+y)+(~c))))*((~((s>h)>(c>x)))+(((x*u)>(~e))>((u+w)*(p+i))))))*((~((((~j)>(~m))*((s*s)>(t*q)))+(~(~(o+b)))))+(~(~(((q>w)>(w*n))*((c+z)>(n>i)))))))*(~(~((~(((c*k)+(b>c))>((~p)*(~o))))*((((d+f)*(w*p))+((q*x)+(m+v)))>(((h>j)>(z*r))+((m>z)*(d+x))))))))*((~(((~(~(~(~z))))*(((~(n+p))>((s>q)>(r*m)))*(~(~(s*v)))))*(~((~((~j)+(b>v)))>((~(j+w))+((j+f)>(q>t)))))))*(((~((((d>m)>(c>h))>(~(t>w)))>(~(~(~v)))))+(((~((n>b)*(l+l)))+((~(p*w))+((z*m)+(~o))))*((~((j+l)*(n+i)))*(((d>e)+(p*u))>((z>h)>(y*r))))))+((((~(~(x*b)))>(((~a)*(d>q))*((x>b)*(~z))))>(((~(~a))*(~(~l)))*(((w>t)>(~h))*(~(~k)))))>(((~((l*a)+(i+l)))*(((x>a)>(c+j))>((~w)+(m>q))))>((~(~(m*a)))+(((d>t)+(~g))*((h*j)*(x>n)))))))))))+((((((((((~(f+v))+((~c)>(~t)))*(((~k)*(a>e))>(~(~d))))+((((h*r)*(p>q))>((o*l)*(h+g)))+(~(~(t*i)))))>(((~((g*h)*(m>b)))+(~((f>y)+(~r))))>(~(~((k>t)+(u*r))))))+((((~((~y)>(r+t)))>((~(g+j))*((y>f)+(e+p))))*((((c>m)>(v>c))+((~q)+(l+r)))*(((r+t)>(p>g))+((t*c)>(x>u)))))*(~(~(((q*r)*(~w))>((c*w)+(a+z)))))))+((((~((~(~e))+((a*s)*(~e))))*(((~(a>j))+((e>w)*(~j)))>(~((b>b)+(v+b)))))+(((((r>f)+(r>s))*(~(a*q)))*(((i>z)>(i+b))*(~(r*c))))>(((~(u>s))+((j+r)>(i>m)))*((~(h+s))>((t*q)+(v+l))))))>((((((f>b)>(g>a))>((s*m)>(s*z)))+(~((u+r)>(i+n))))+(((~(~d))*((o+h)*(k+q)))*(((e+l)+(h*g))*((k+u)+(c*w)))))*(((~((a*z)*(e*e)))+(((o>z)+(c>j))*((d+y)>(~o))))*(((~(t+d))>((s>r)*(j+t)))+(((r+t)+(l+z))>(~(q*g))))))))+(((~((((~(~v))>(~(m>n)))+(((~y)+(c*b))>((~x)+(l+s))))*(~(((~s)>(g>u))*((q+a)*(f+p))))))*(~(((((j>o)+(a+k))*(~(~s)))>(~((q+h)>(~c))))+((~((l+z)+(i*x)))*(((g*j)>(j>f))>((b*o)+(c*e)))))))+((((~(~((e+j)+(g+p))))*(~(~(~(e*p)))))>(~((((i>d)>(t*k))+(~(~q)))>((~(c+o))>((q*k)*(p+v))))))*((((((c+d)*(n*k))*((~j)+(~v)))*(((j+r)>(t*p))*((j*l)>(f+m))))*(~(~((~l)*(~e)))))+((~((~(d>a))*((x>y)+(~o))))>((((h>l)*(~d))>((e*j)+(~w)))*(~((o+m)>(l+x)))))))))*(((~(~((((~(~m))*((f+x)+(~h)))*(~((t*v)*(f*s))))*((~((v*u)*(o+b)))+(((~d)+(p*g))>((~j)>(b>y)))))))*(((~(((~(v+f))>((e+m)+(t>w)))+(((v+a)>(e+p))+((q>x)*(~v)))))*(((((~l)>(f>g))+(~(n>x)))+(~((f+a)>(q+v))))+(~(~(~(~f))))))>(((((~(l>i))+((~z)>(y*f)))>(((d*t)*(h+d))*((o*g)>(~r))))+((((p+s)*(x*g))+((i*m)>(k>o)))*(((c+u)*(~p))*(~(p>z)))))>(((~((w+h)*(u+p)))+(((s+f)+(~r))+((t>r)>(x>x))))*((((~g)>(s+y))+(~(g+s)))*(((k*h)>(q*g))+((g+y)+(a>t))))))))+(((~(((((~q)*(s*n))>((b+f)*(h>s)))>(((i>b)*(q+f))+((o>m)+(x+u))))>((~((j>r)>(d+b)))*(((y+f)>(n+s))*((n*c)*(f>s))))))*(~((((~(c>r))+((o>y)>(p>y)))*(((m>x)+(q>e))+(~(q+a))))*(((~(~q))>((g*c)>(o*x)))+((~(~o))+((g>t)+(~h)))))))*(((((((b*p)+(w+j))>((~y)+(a+x)))>((~(w*d))*((c*j)>(d+d))))>(((~(v+z))+((~v)+(~v)))*((~(g*c))+((t*p)+(x>y)))))>(~(((~(b*c))>((p>n)*(q+a)))*((~(b*z))>((l*b)*(~q))))))*(~(((((g>h)+(p>l))+(~(w+x)))>(((e>b)*(s+a))>((b*y)+(~w))))*(~(((~g)>(~d))+((z+c)+(h+z))))))))))>(((((((~(((h>x)*(i*f))>((j*w)*(g+k))))*((((n+b)>(e>e))+((x>b)*(d+u)))+(~((v>e)+(p*o)))))*(~(~(~(~(~r))))))*(((~(((r*f)+(f>y))>((m>c)+(g+a))))*(((~(d>y))+((q>c)>(x*x)))>(((~f)*(c*h))*(~(~w)))))>((~(((n>i)*(t>c))>((~a)>(k+t))))+(~(((i*l)*(l+e))+((d>c)>(q*t)))))))>(~((((((u>t)>(~z))>(~(e>b)))>(((p+x)>(a+x))*((n*j)>(g+q))))>((~((b*t)>(b*t)))>(((~y)*(w*n))+((n>j)+(q>k)))))*(((~(~(~l)))*(((e*f)+(~z))>((p*a)+(g*u))))>((((~w)>(n+l))>((u+u)+(e+g)))+(((b+a)*(x>z))>((z*f)+(~t))))))))*(((((~(((~f)+(t+j))*((v+u)*(r*u))))*((((~i)+(v+l))>((i+n)+(u*b)))>(~((v>e)*(k*g)))))*((((~(x*f))+((g+z)*(a+v)))+(~(~(t*m))))>((((~p)*(i>r))*(~(~y)))+(~((f+z)>(~n))))))>(~(~((((a>l)>(p*a))>((n>d)+(~d)))+(((l*n)+(~r))>((j*v)>(b+e)))))))*(((((((j*m)+(u*p))*((t>p)*(~f)))+(((~m)+(i+h))>((~o)+(q+b))))+(((~(d*n))*((~n)>(j>o)))*((~(k>m))*(~(a+a)))))+(~((((c*m)*(x+x))>(~(v>w)))>(((y*q)+(l>r))+((d+r)>(x*f))))))*((((~((o*c)>(l*q)))+(((o+f)*(g*e))>(~(d+k))))*(((~(h+e))*(~(j>x)))+(((~s)>(j*v))>((i*p)+(~g)))))*(((((~m)>(w>g))*(~(r+m)))*((~(i+k))>((~e)+(g+m))))>((~((~s)+(g*z)))+(((w+h)+(f+v))*((~m)+(a+m)))))))))*(((((((~((l>h)+(a>b)))+(((~c)*(x+u))+((w>h)*(d+p))))>(~(((v*v)+(~p))*((m+c)*(o*a)))))>(((((g*n)*(r>p))*(~(o*m)))>(((i*f)*(~u))*(~(~j))))>((((y>e)>(w+y))*((v>k)+(~j)))*(((~h)*(~t))+(~(h+w))))))>(~(~((((t>c)+(g*h))*((j>k)+(e>b)))>(((t>d)+(x>j))>((~e)*(~w)))))))>(((((((e+n)*(~x))*((~n)+(e*w)))+((~(f*x))+(~(r>o))))+(~(((z*x)*(~g))>((~r)+(p>w)))))+(((((~w)*(t*x))+((b*y)+(l+c)))>(~((j*n)*(c*i))))*((((~u)>(~p))>(~(e+d)))>((~(t>e))+((~i)>(n*v))))))+(~(((((i*k)*(x*b))*((w>y)+(z>n)))+(((h>p)>(~p))>((~y)+(n>d))))*(~(~((z+g)+(~y))))))))*((((~(~((~(q+e))>((i*s)+(d+o)))))>(((~((j>d)+(x+o)))>(((~m)+(v+p))+(~(~v))))+((((w*w)+(~g))+((~l)*(n+f)))+(~((i*r)>(~h))))))>((((((o>e)>(d>a))+((~c)+(~z)))>((~(~z))*((c+q)>(h*v))))>((((~k)*(e>u))+((u>b)>(v>s)))+(((g+x)+(j>p))>((~h)*(f+l)))))+((((~(g+l))>((t>u)*(~b)))+(((~h)+(r>v))*((r>k)*(~b))))*(~(~(~(c>r)))))))>(((((((v>g)+(x+o))+((x*e)>(g>t)))>(((r>i)+(c*p))>((~z)>(y*n))))+((((y+e)>(k+c))>((h>m)*(l+m)))>(((u+n)+(x>d))>((~w)+(~l)))))>(((((g*j)>(c+m))+((~m)*(y>i)))>(((~p)>(j+m))>((z*z)+(f*n))))*((~((v*k)*(k+e)))>((~(z>h))+((u*y)+(l*g))))))+((((((o*f)*(r>f))*((d>w)>(v>m)))*(~((~x)*(r+n))))>((((e+v)*(~n))>((n+b)*(~s)))+(((p>k)*(p+b))>((~n)>(s*v)))))*(((((b*o)+(h*n))+((j+l)>(b>t)))+(((i*p)+(e+j))>((z+w)+(~e))))*((((~s)*(~b))>((~u)>(d+g)))+(~(~(g>i))))))))))))))"));

	debug("output 3", Logic::infixToPrefix("((((((~(((~(((((v*e)>(t+t))>((m>d)>(m*q)))>(((x+t)+(l*y))*((~j)*(~u))))>(~((~(b>o))*((j+w)>(c*s))))))+((~((~((r>h)>(u+q)))*(((d+r)>(~s))*((f*m)*(p>u)))))*(((((a+h)*(s*n))*(~(~b)))+((~(g>z))>((g>a)>(i>a))))+((((k+e)+(w+u))+((~j)+(m+c)))*(((h*o)+(~g))+((~e)+(e+z)))))))+((~(((((~r)>(h*h))+(~(y+e)))+((~(v*s))*((x+n)*(m*m))))>(~(((~z)+(~w))>((o*d)*(t>c))))))*(~(((((~b)+(a>i))*((f+i)*(~f)))*(((~g)+(q+q))+((v*r)*(g+h))))+(((~(~l))*((n>c)*(o>d)))*(((z*s)*(y>f))>((f*d)>(q+y)))))))))+((((((((~(c>l))+(~(h*u)))*(~((~v)+(w>q))))*((((~u)*(~a))*(~(x*p)))*(~((t+n)>(k*t)))))*(((~((z*t)>(~l)))*(~((u*v)*(~j))))>(~(~((l>d)*(i*w))))))*((((((~n)>(~a))*(~(e>f)))*(((p*y)*(u+o))*((~n)*(~g))))>((~((~r)+(r+a)))+((~(u>m))>((x>m)>(j*i)))))>(~(((~(i*p))>((~g)*(d>i)))+((~(t+v))>((n*j)>(o+d)))))))*(((~(~((~(q>r))+(~(f+c)))))+((((~(s*s))+((j>w)+(~p)))*(((b>x)>(y>u))+((x*d)*(j+w))))>(((~(~r))*((a+y)+(g>m)))>((~(y+r))*((~c)*(u*e))))))+((~((((j+k)+(n+e))*(~(h+z)))>(((w*y)>(j+u))+(~(~g)))))+((((~(s+k))>((p*f)>(~s)))*(~((n>o)+(f>z))))>((((j+e)+(r*v))+(~(~x)))+(~((u+u)*(~j))))))))*((~(((((~(d>n))*((z>u)>(s*q)))+((~(z*t))+((r*r)*(q*b))))+((~(~(a>l)))*(((~v)>(w>b))+(~(~t)))))*((((~(i*f))+(~(~i)))*((~(o+c))*((~d)>(k+q))))+(~(((r*x)+(k>u))+((~e)>(m*x)))))))*((~((((~(s*i))*((e>n)*(y>c)))>(((p+n)+(s>g))+((~f)>(x+r))))>((~((~s)*(d+f)))*((~(j*t))>((y*i)+(l>v))))))+((((((n>n)*(n+q))>(~(~x)))+(((c*u)>(u*y))>((~b)*(~d))))*(~(((x>b)*(~n))*((~w)+(d+v)))))>((~(((n+f)+(g*s))>((a>p)+(v*z))))*(~(~((m+c)>(p*t))))))))))+((~(((~(((((v*g)*(o*c))>((p*z)*(u+o)))+(((b+c)+(p*u))*((e>s)*(g>h))))>(~(((~z)+(w>r))>((c+d)*(l>l))))))+(~(~((((y>l)>(~y))*(~(l+z)))*(((~y)+(m*n))*(~(n>c)))))))+((~(((((j+i)*(w+c))*((j*d)*(c>e)))+(((l*j)+(m+c))+((~k)*(~n))))+(~(((t>q)>(~h))>((~g)>(d+a))))))*((~(~(((y>t)>(k>n))*((e*e)>(o>k)))))>(((((d>z)*(i>t))>(~(~w)))*(~((q*z)>(t*a))))>(((~(~t))>((~v)+(~s)))*(((p>i)+(y+g))>(~(l+w)))))))))>(((((((~((i+u)+(w+h)))>(((r*r)>(c+f))*((i*i)*(v>x))))*(~((~(p+p))*(~(o*g)))))+(~((((g>y)+(x>s))>((c+z)>(k>h)))>(~((d>w)+(~f))))))+((~((~((c*w)>(g>y)))*(((~g)*(q>r))+((e*h)+(a*y)))))+(((((e>o)+(k*s))>(~(p>a)))*(((m*k)*(e*e))+((y+q)>(~c))))+(~((~(s*i))*((c>p)>(~k)))))))*(((((((w+l)>(~e))+((t*o)+(t>f)))+(((h+f)>(n+j))>(~(~n))))+((~(~(v+h)))*(~((r>k)+(j>u)))))*(((((b>r)>(a>z))>((j*w)>(z*m)))>(~((j*g)>(~k))))+(~(~((w>d)*(o+c))))))+((((~((b*n)>(v*r)))+(((u+g)>(e+e))*((~n)+(n+y))))*((~((c*r)>(y+l)))>(((b+n)>(z*h))+((~k)>(s+v)))))>((~(((~h)+(~h))>(~(b+s))))*((((~a)+(y*u))+((s*k)*(~d)))>(((e>i)+(y*q))+((~j)*(l*a))))))))*(((~((~(((n>m)>(r*g))*((j>q)+(v>s))))>((((k>o)+(q*j))+((k>x)*(y>y)))*(((l>d)>(b>j))+((~k)>(~x))))))+((((((z+y)+(~f))>(~(~n)))+(((w>p)*(m*t))>((r>l)+(~a))))*(~(((x>s)>(~g))>((~c)>(w+w)))))*(((~(~(m>e)))>(((~e)*(n>l))+((~z)+(t+o))))+((((m*j)*(~q))>((x>c)*(m*t)))*(((l+m)*(l>i))+((~f)+(~e)))))))*(((~((((s>i)+(c>t))+((w+d)*(f>h)))>(((~e)>(q+b))+((w+j)>(e>u)))))*(((((i*f)+(r>n))*((l+w)>(e*j)))*(((o+r)>(t*o))+((e>y)+(~t))))*(~(((o>x)*(a+y))>((~l)*(j+t))))))>((((((~l)+(j*d))>((f>a)*(~x)))+(((z*c)*(q+o))*((d+i)>(j+o))))+((((~l)+(~w))>(~(l*g)))>(~((n>i)+(k>u)))))+(~((((~x)*(b>e))*((m*b)*(y+j)))+(((~x)+(e>f))+((x>s)>(g>z)))))))))))+((((((~(((((~n)+(x>v))+(~(w+b)))>(((~u)*(n*y))>((~u)+(~x))))+((~((u*k)>(~f)))>(((q+f)+(~p))>((w>m)>(n+h))))))*(~(((~((v+u)>(i*a)))+(((~y)+(~q))>((~m)+(y+k))))*((((~w)*(e>d))>((~m)*(~j)))*(((a+n)>(i+v))+(~(~z)))))))+(~((~(((~(y>d))+((p+h)+(a*m)))+((~(q>o))*((w+b)>(a*e)))))+(((((x>w)+(~y))>((~v)>(m*j)))+(((v+n)*(~m))+(~(j+v))))+((((z+g)+(~o))+((x>e)*(w*b)))+(~((b*o)>(~e))))))))*(~((~(((~((p*e)>(d*g)))*((~(~a))*(~(~b))))*(((~(d+r))+(~(h>g)))*(((~k)+(v>s))+((~q)*(w*u))))))*((((((w*x)*(~u))>((a>d)+(s>h)))+((~(g+a))*((l*l)+(n+f))))>(((~(j*k))*((c>n)*(a+l)))*(((d>k)+(u>c))>((m+x)>(~t)))))>(~(~(((f+w)+(w*y))>(~(q+c)))))))))+((((((((~(u+s))*((~u)*(b>m)))>((~(k>e))*((~g)+(u+o))))>((((z>u)*(o*b))>((f+i)+(v+l)))+(((b*x)>(p+b))*(~(m>f)))))>((((~(q*q))*((~r)>(t*a)))*(((u>l)+(m+h))*((k+e)*(~a))))>((((g>b)>(s+y))>((~i)*(v+r)))+(((~q)+(~q))>(~(b+f))))))*((~((~((v>u)*(g+v)))>(((~t)+(v+d))*((~t)>(g>i)))))*(((((g+q)+(~p))+((q*g)+(j*s)))*(((~y)+(y*m))+((l>t)*(m*k))))+((~((m*c)*(v>t)))>(((y>k)*(g+r))+((n>t)+(r>u)))))))>(((~((((~c)+(m*w))+((~j)*(~o)))>(((e+z)*(~k))*((o*f)>(~w)))))+((~(~(~(v>m))))+((((t>r)+(w*g))*((b*a)*(e>s)))>(~(~(~z))))))>((((((o>f)+(~o))*(~(b+a)))*(~((p>h)*(p>p))))*(~((~(c+o))*((v*m)*(z>n)))))*(~((~((w>w)+(h*g)))*(((z*a)>(v>n))>((~r)+(~e))))))))+(~((((~(((w*l)+(~c))*((w>y)*(o*w))))>((~((w*c)+(x>y)))+((~(s+m))*((u+u)*(~c)))))*(~((((~p)*(~e))+((z*i)*(~j)))>((~(~a))*((s*r)>(m+q))))))+((((((~x)+(h>q))>((~e)>(y*i)))+(~((l>p)+(z*k))))+((((t*q)>(u+o))>((x>c)+(g+g)))*((~(z+h))*((l+m)*(~s)))))*((~(((~t)*(a*l))>(~(c*n))))+((((~k)>(h+g))+((s*x)>(c+c)))>(((~y)+(c*i))*((~g)>(h+s))))))))))+(((~((~(((((~q)>(~w))>((~z)>(s*z)))*(~((~l)+(q*j))))+(~(~(~(q*y))))))>((~(~(((~d)+(c+k))>(~(c+x)))))>((~(~((~t)*(d+h))))*((((n*j)+(q>y))+(~(z+s)))*(~((y+k)>(o*d))))))))+(((((~(((r*x)>(r*s))>((l+g)+(t*o))))+((~(~(m*k)))>(~((~r)+(o+r)))))+(((((~r)>(~r))+((d*y)*(~a)))+(((s*l)*(p*i))*((~b)>(v*g))))>(((~(x*l))+((v>x)*(z>y)))+((~(b>w))+((d*h)*(q>s))))))*((~(((~(x>h))+(~(k+w)))*(((u+y)*(j*i))>(~(y+p)))))>((((~(r*f))>(~(a*n)))*(((w*p)*(l*o))+((z+x)*(~x))))+(((~(l>v))+(~(~v)))+(~(~(b+b)))))))*(~((~((((w>s)>(n*n))+((i+r)+(w>l)))>(((n*o)+(x>y))>((c*m)*(n+n)))))+((~(((~e)+(e>x))+((u*c)>(f+g))))>((((~q)>(y*r))*((i*z)>(~o)))*(((~q)+(i*z))+(~(~v)))))))))*((~(~((((~((b>f)*(g+e)))*(((~b)>(e*d))>((f*y)>(b*f))))+((((p+y)+(j*f))*((l*f)*(r>g)))+(~(~(u*n)))))>(~((((b>h)+(c*a))>((k+x)+(z*z)))>(~((~g)>(x>k))))))))*(~((((~(((~v)*(d>u))>(~(u+t))))*((((h*d)>(f*f))+((x*m)>(z*t)))>((~(~u))+((o>d)>(~b)))))>((~(((r>i)*(~s))>(~(~k))))+(((~(h>s))+((u>u)*(x+m)))+(~((k+x)+(t*d))))))*((~((((v*z)>(y>r))*((~f)>(s>n)))*(((~k)*(e*v))*((g>n)>(l+q)))))*(((~((x+h)*(~y)))>(~(~(g+c))))>((((u>r)>(b+a))>((m+f)+(t*b)))+(~(~(y*n))))))))))))*((~(~((~(((((((a+x)>(o*m))*(~(~z)))+(((z+x)+(a*x))+((w*a)*(p>m))))+(((~(j>f))>((k*d)*(n>a)))>(((b+i)+(t+r))+((~z)+(k+i)))))*((((~(b*b))*((~c)*(~k)))*((~(~o))>((o*z)+(d>m))))+((((a+t)>(r+w))*((v+f)*(~l)))+(~((v>h)+(~v))))))*(~(~((~((p+u)*(x*c)))*((~(z*s))*((v>t)+(s*r))))))))*(((((~(((n+f)+(~t))>((x>o)+(n+p))))*((~((m+m)+(b+v)))*(((~h)*(y>b))+(~(w*p)))))*(((((q>r)*(m>f))>(~(~y)))+((~(k*u))*((u+n)+(a*t))))+(~(~((d*j)>(c>m))))))>((((((~i)*(l*e))+(~(~z)))*(((c+i)+(r*j))*((e*b)>(~w))))*((((~b)*(p+z))*((q+u)*(h+d)))>(~(~(t*r)))))*((~((~(i>t))+(~(m+k))))*((((x+o)*(~s))*((p+y)>(~u)))>((~(t*k))>((r+c)*(g+e)))))))>(((((((z>r)>(b>g))>((i>i)*(~e)))>(((n>f)>(a>n))+(~(~c))))+(~(((p*l)+(z*e))*((r+d)+(m+y)))))>(((((q*g)*(r+c))*((h>d)>(y*d)))*(((~t)+(e+d))*(~(o>w))))>(~((~(~v))+((~w)+(m*r))))))*((~((((c*t)*(k>b))*(~(v+f)))>(((r*h)*(~x))>((r*v)*(b>r)))))+(((((m*f)*(k>o))+((g*g)+(~o)))>(((f+w)*(q+u))>(~(f>j))))+((~((~r)*(k>n)))>(((r+i)*(a>m))+(~(b+o)))))))))))>((~(~((~(((~(~((m*n)>(e>l))))*(~(((w*n)>(w*r))*(~(z>t)))))>(((((q+h)>(t*f))*((y+y)+(a+p)))>((~(y*a))*((t+l)+(n+z))))>((((~b)*(u*b))*(~(w>i)))+(~((b*b)>(g*i)))))))>(~((((((p*l)*(~g))*(~(l>h)))+((~(u*k))*((f*d)*(~e))))+(~(((l*z)+(w>q))+((d>x)>(~f)))))*(((~((~h)*(~h)))+(((r+j)*(f+d))*((~r)*(p>k))))*(~((~(p*o))>((o*e)+(j+t))))))))))+(((((~(((((o*r)>(t>k))+((m>o)>(k+h)))+(((~n)>(o*i))>((~p)*(h>k))))>((~((m>w)>(f*v)))>(((z*r)*(j*a))*(~(f*c))))))>((((((k>r)>(~c))*((~k)>(w*a)))+(~((s+t)*(~z))))*(((~(~s))*((u*n)>(h*h)))+(~(~(y>p)))))+(((~((n+w)>(~c)))>(((~f)>(r*i))+(~(k+g))))*(((~(e>w))>((q+a)*(u+d)))+(((f>y)*(g*y))+((~s)>(~m)))))))>(~((((((z*a)>(m>z))>(~(n>t)))*(((~o)*(~d))+(~(x*w))))>(((~(~u))+((~e)*(j+h)))>(~(~(d*d)))))>(((((q*t)+(g>o))*((s*f)*(~x)))+(((m>l)*(~t))*(~(j*k))))*((~((c*n)>(v+i)))+(~((r>m)>(~s))))))))*(~(~((~((((z>m)*(g>l))+((~y)>(n+l)))+((~(u*g))>(~(s*h)))))+(~((((b*e)*(x>f))+((~o)*(m+n)))>((~(a+r))+((o>n)*(t+e)))))))))*(~((((~(~(((w>s)+(u+b))+(~(~u)))))*(~((((s+u)*(o>t))*((y+c)>(o*o)))>(~((n*j)*(r+d))))))+(~(((~((t>o)>(z+e)))+((~(~g))+((~y)+(e*y))))+(~(((~q)>(q*t))*((k*t)>(~y)))))))>((~((~(((v>m)+(w+b))*((q+o)*(k>s))))+((~((o*v)*(s*t)))*(((i+l)>(r>t))*((~j)*(i+h))))))*((~(~(((p+r)*(~q))*((h>p)+(y+n)))))>(~(((~(e*t))*((g+m)*(s>m)))>(((~p)>(c>f))*((d+m)>(p*r)))))))))))))>(~(((~(~(((~((~(((~c)+(q>f))>((e+p)>(~k))))*(~(((u>h)>(d+p))*(~(z>d))))))+((~((((k*a)>(g+p))*((h+j)>(~r)))*(~((~k)>(t*l)))))>(~((((j+g)+(q+n))+((p+k)+(~a)))>(((l+o)*(q*l))+((~v)>(g+d)))))))*(((~((((j*v)>(e>f))*((~u)>(~q)))>(((u*f)>(h+k))+(~(f+i)))))>(~((((p>m)*(q>k))*(~(l>x)))*(((w*i)>(f+z))>(~(~x))))))+((~((~((r+v)*(~d)))+(((y>d)*(h+n))+((q+x)>(v>j)))))>(~((((j>n)>(i>z))>((o*q)+(w*w)))*(~(~(h>g))))))))))>((((((~((((j*b)*(t*l))+(~(~a)))*((~(l+m))+((h*x)*(~u)))))+(~((((~p)>(~i))*((n>s)+(l*c)))>(((j+j)>(c>g))>((c+r)>(d+t))))))>((((((s*m)>(s>k))+(~(v>n)))*(((l+e)*(w+u))*(~(d*x))))*((((t>u)>(~f))+(~(~y)))>(~((p>e)+(n+b)))))>(((((s+b)+(x>i))*(~(y>g)))>(((~e)>(o+s))*((~e)>(~w))))+((((g+d)>(s+f))>((~t)+(~y)))*(((d+o)+(s+x))*((r+g)+(z*h)))))))+((((~((~(d>v))*(~(~b))))>((~(~(~e)))+(((l*x)*(~j))*(~(~x)))))+(((((d*e)+(b+o))*((f+u)>(~i)))*(~(~(~s))))>((((e*o)>(h*b))*(~(a+j)))*(((e*v)+(~j))*((y+k)>(~e))))))*((((((w>i)>(i>b))+(~(m*a)))*(((~n)>(~z))+((a+u)*(l>f))))>((~((e*a)>(n>a)))>(((p*d)>(c>t))*((~a)*(z*r)))))+(((((l*q)>(o*a))>((~u)+(g*v)))+((~(y*x))+((o>f)>(~j))))+((((~z)>(q>t))>((~w)>(e>m)))+(((~t)+(t+r))+((r+v)*(~n))))))))>((((~((((b>r)*(l>k))*((l+g)>(z+i)))>(~((g>b)*(d*k)))))>(~((((h*p)*(m>f))>((n+y)+(s+z)))*(((~o)>(t*y))>((h+e)>(j*x))))))>((((((s>b)>(~e))*((s>c)*(l+a)))*(((q*f)*(r+b))+(~(y+u))))+((((q>t)+(h*f))>((m+k)>(g*y)))*(((x+n)*(w+u))>((~t)+(~f)))))>((~(((x*h)+(r*c))+(~(i*f))))>(~((~(k>w))+((g>m)*(~q)))))))*((~(((((h+u)>(j>w))*((g>v)>(k+n)))>(((x+j)+(~s))*((u*e)*(s>h))))*(((~(~r))+((w*r)>(u*b)))*(((~l)>(v>x))>(~(b*v))))))*(((~(((j>h)*(~n))*((s*z)+(l*o))))*((((o+u)*(p>o))+((~e)>(h+n)))*(((n>x)+(~t))*((s+q)>(h+c)))))+(~((((~n)>(~d))>((s+r)+(~t)))>(((b+a)>(t+u))+((n+q)+(z+j)))))))))>(((((~((((g>l)+(~t))>((e*o)>(z>j)))*((~(s>a))>(~(c+b)))))*(((((d>r)*(u*e))+((s+c)*(q*b)))+(~((~y)>(~i))))>(~(((h+c)+(c*f))*((v*g)+(~h))))))>((((((d*r)*(~o))*((v>q)+(f+h)))>((~(f>c))+((~r)>(f>p))))+((((m+u)+(y>w))>((e>n)*(j*c)))>(((m*q)*(t*v))*(~(o>c)))))+(~(~(~((o>o)+(s>t)))))))>((((~(((~n)+(k+f))+(~(j+w))))>(~(((~u)>(~y))>(~(p*h)))))+(~((((m*e)*(o*u))>(~(c+c)))+(((y*m)+(i>w))>((k+v)>(~e))))))+((((((q*u)*(e+v))*((k+g)*(a>g)))>(((r>l)+(~c))>(~(c+z))))*(((~(d+g))>((m>g)+(f*p)))>(((f*f)>(f>q))>(~(y*k)))))+((~(~((r>r)+(~r))))+(~(~((u>l)+(v+m))))))))*(~(((((((z+q)+(b+h))+((~g)+(m>p)))*((~(~a))>((~e)>(h+l))))*(((~(l>k))>((c*a)+(~l)))*((~(y+x))+((b>o)*(~p)))))>(~((~((z+b)+(j>b)))*(((e+j)*(m>t))>((b>y)>(~c))))))+((((((~a)*(s*z))+((k>g)*(~n)))*(((t+r)+(o+q))*((~c)+(p>h))))+((~(~(~y)))+(~((z*f)*(~j)))))*(((((q*c)>(w+r))*((~y)*(i>f)))*(((u*q)>(y+x))*(~(~z))))*((((u>e)*(l>o))*((r*s)+(~l)))>(~((l>l)+(~q)))))))))))+(((~(~((((~(((~g)>(~e))>(~(p+r))))>((~(~(t*b)))>(~(~(~e)))))+((((~(l+o))>((d*p)>(h>f)))>(((~v)+(~w))>((x>h)*(~n))))+((((f>k)*(~o))>((g*u)*(a*r)))>((~(f+b))+((r*s)+(z*s))))))>((((((z*i)+(e*m))>((~h)>(r>k)))>((~(i+z))+(~(y*q))))>((((~z)>(~e))+(~(x>u)))*(~((q+x)>(w*s)))))*(~((((v*o)>(~b))>((y+t)+(h*x)))*(((~l)+(q>n))>((p+z)>(~o)))))))))*(((((((~((~x)*(p>f)))*(((p>n)*(g>l))>((k>e)+(q>w))))*((((c*s)*(g>v))*(~(n>f)))>(((g*g)*(o+k))+((r*c)*(~z)))))+((~(((~j)*(p+y))*((q>z)*(i+z))))>(~(~((j>e)*(~q))))))+((((((q*u)+(~t))+((p>r)*(o>y)))+(~((s+e)>(i>z))))+((((b>o)>(~g))>((j+d)*(i>r)))>(((y>h)+(c>b))*((~s)>(p+a)))))>(((((j*f)+(~m))>(~(o+l)))*((~(v>k))*(~(~m))))+(~(~((z*l)+(g*k)))))))+((((((~(x>i))+((k*k)+(~a)))>(((~l)*(a>u))>((o+l)*(~r))))+((((b>d)+(v*o))>((~l)>(~w)))*(((o*z)*(j+p))>((r+h)>(l*o)))))*(((((k*x)>(y>t))>((t>r)>(n*u)))*(((g>j)>(~x))+((e>b)*(c+z))))>(~(((b>v)>(~h))+((~b)+(~s))))))+((((((x+l)*(o+x))*(~(~m)))+(((~j)*(~d))>((x>w)+(x>l))))>((~((j>l)+(n*o)))+(~((~p)+(p>k)))))>(((((o+r)+(s>r))+((w*c)+(g>d)))*((~(~p))+((e+j)>(k+b))))>(~(((i+x)+(s*e))+((~b)*(r>z))))))))+(~(~((((((e*f)*(~p))>((~w)+(~x)))*(((~z)*(l*p))>((k>k)>(z+z))))>((((r+y)>(~w))>((m*l)+(n>l)))+((~(b+c))*((c>x)+(i*u)))))*(((~(~(w>z)))+((~(s*d))*((h+w)*(b+r))))*(~(~(~(o*m))))))))))>(~(~(((~(((~((w+w)>(~q)))>(((i+m)*(i+b))+((l>m)*(x>u))))+(~((~(~y))>((~n)+(g*j))))))+(~(((~(~(u>q)))+(((~e)>(l>p))+((~q)>(u>l))))*((~(~(j+p)))*(~((l>r)+(k>u)))))))>(((((((u+v)+(~d))*((~u)*(d+d)))*(((m+u)>(n+t))*((n+e)+(y*j))))*((~((~f)>(l+z)))+(((~p)+(f>h))>(~(y>j)))))>((~(((j*b)+(j*b))*((~q)+(e*d))))+((~((n>k)>(o+o)))*(((p>h)+(v*l))*(~(s>c))))))*((((((o+e)>(d*s))>((~o)*(x*c)))*((~(t>o))>((d*o)*(~n))))+((~(~(~v)))*((~(z>p))*((m>s)*(c>j)))))>(((~((~n)+(n*t)))+((~(~x))*((m+b)+(e+t))))*((((w+b)*(~r))>((f+c)+(o+z)))+(((q>e)*(~s))>(~(~n))))))))))))))"));
}

void testParseTreeToInfix() {
	Logic::Operator a('a');
	Logic::Operator b('b');
	Logic::Operator c('c');
	Logic::Operator con('*', new Logic::Operator('~', &a), &b);
	Logic::Operator impl('>', &con, &a);
	Logic::Operator dis('+', &c, &c);
	Logic::Operator dis2('+', &dis, &c);
	Logic::Operator head('+', &impl, &dis2);
	debug("Infix from parse tree", Logic::parseTreeToInfix(&head));
}

void testParseTreeHeight() {
	Logic::Operator a('a');
	Logic::Operator b('b');
	Logic::Operator c('c');
	Logic::Operator con('*', new Logic::Operator('~', &a), &b);
	Logic::Operator impl('>', &con, &a);
	Logic::Operator dis('+', &c, &c);
	Logic::Operator dis2('+', &dis, &c);
	Logic::Operator head('+', &impl, &dis2);
	debug("Height", Logic::getParseTreeHeight(&head));
}

void testParseTreeVal() {
	Logic::Operator p('p');
	Logic::Operator q('q');
	Logic::Operator head('~', &p, &q);

	// map<char, bool> valueMap = {
	// 	{'p', true},
	// 	{'q', false},
	// };
	TruthValStore tvs("pq", 0b01);
	debug("Value", Logic::getParseTreeVal(&head, tvs));
}

void testValStore() {
	// p=F q=T r=T
	TruthValStore tvs("pqr", 0b110);
	tvs.setTruthVal('q', false);
	debug("Truth val of p", tvs.getTruthVal('p'));
	debug("Truth val of q", tvs.getTruthVal('q'));
	debug("Truth val of r", tvs.getTruthVal('r'));
	//debug("Truth val of z", tvs.getTruthVal('z'));
}

void testPrinting() {
	Logic::Operator a('a');
	Logic::Operator b('b');
	Logic::Operator c('c');
	Logic::Operator con('*', new Logic::Operator('~', &a), &b);
	Logic::Operator impl('>', &con, &a);
	Logic::Operator dis('+', &c, &c);
	Logic::Operator dis2('+', &dis, &c);
	Logic::Operator head('+', &impl, &dis2);

	Logic::displayParseTree(&head);
}

void testprefixToParseTree() {
	string test = "~(a+b)";
	debug(test, Logic::parseTreeToInfix(Logic::prefixToParseTree(Logic::infixToPrefix(test))));
}



int main() {
	debug("debug", 69);
	trace("trace");
	todo("todo");
	//error("error");
    testLogic();
    testParseTreeToInfix();
	testParseTreeHeight();
	testParseTreeVal();
	testValStore();
	testprefixToParseTree();
	testPrinting();
    return 0;
}

